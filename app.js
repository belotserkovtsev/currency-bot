const Telegraf = require('telegraf');
const Extra = require('telegraf/extra')
const AsyncLock = require('async-lock');
global.__basedir = __dirname;
global.__lock = new AsyncLock();
const Parser = require('./models/parser');
const Descriptor = require('./models/descriptor.js');
const Logs = require('./models/logs');
const Exception = require('./exceptions/exception');

const bot = new Telegraf(process.env.TOKEN);

bot.telegram.getMe().then((botInfo) => {
    bot.options.username = botInfo.username
});

/* On /start event handler */
bot.start(async ctx => {
    // ctx.scene.enter('start');
    try{
        ctx.chat.type === 'private' ?
            await ctx.replyWithHTML('ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bank Tracker!</b> ' +
                '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –∏ –≥–¥–µ. ' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: "<b>—Ö–æ—á—É –±–∞–∫—Å—ã –≤ —Å–ø–±</b>"',
                Telegraf.Markup.keyboard([['üß≠–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', 'üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ']]).
                oneTime().resize().extra()) :
            await ctx.replyWithHTML('ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bank Tracker!</b> ' +
                '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –∏ –≥–¥–µ. ' +
                '–ù–∞–ø—Ä–∏–º–µ—Ä: "<b>—Ö–æ—á—É –±–∞–∫—Å—ã –≤ —Å–ø–±</b>"');
    }
    catch (e) {
        __lock.acquire('error', () =>{
            return Logs.logError(new Exception(7, e.message));
        })
            .catch(err => {
                console.log(err.message);
            })
    }
});

bot.hears('üß≠–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', ctx => {
    if(ctx.chat.type === 'private') {
        ctx.replyWithHTML('ü§ñ –ë–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –æ–±–º–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –±–æ–ª–µ–µ —á–µ–º –≤ 35 –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏. ' +
            '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, <b>–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≥–¥–µ –∏ –∫–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–∞</b>. –ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
            '"<b>–∫—É–ø–∏—Ç—å —Ñ—É–Ω—Ç—ã –≤ –º—Å–∫</b>" –∏–ª–∏ "<b>—Ö–æ—á—É —á–µ–±–æ–∫—Å–∞—Ä—Å–∫–∏—Ö –π–µ–Ω</b>". \n\n–¢–∞–∫ –∂–µ –±–æ—Ç —É–º–µ–µ—Ç –ø–æ–ª—É—á—Ç—å ' +
            '–∫—É—Ä—Å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¶–ë –†–§ —Å 97 –≥–æ–¥–∞ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å - –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—Ä–∞–∑—É: ' +
            '"<b>—Ü–± 20.03.2016 –µ–≤—Ä–æ</b>" –∏–ª–∏ "<b>–±–∞–∫—Å—ã –≤ 15.07.1999 —É —Ü–±</b>"\n\n' +
            '–ë–æ—Ç–∞ —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ –æ–Ω –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π ' +
            '–æ–± –æ–±–º–µ–Ω–µ –≤–∞–ª—é—Ç')
            .catch(e => {
                __lock.acquire('error', () => {
                    return Logs.logError(new Exception(7, e.message));
                })
                    .catch(err => {
                        console.log(err.message);
                    })
            })
    }
});

bot.hears('üí£–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ', ctx => {
    if(ctx.chat.type === 'private') {
        ctx.replyWithHTML('üëæ <b>–°–æ–æ–±—â–∏</b> @belotserkovtsev —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å')
            .catch(e => {
                __lock.acquire('error', () => {
                    return Logs.logError(new Exception(7, e.message));
                })
                    .catch(err => {
                        console.log(err.message);
                    })
            })
    }
});

bot.on('text', (ctx, next) => {
    let message = ctx.message.text;
    let currency = null;
    let date = null;
    Descriptor.decodeMessageCB(message)
        .then(res => {
            currency = res.currency;
            date = res.date;
            return Parser.getRates(res);
        })
        .then(async res => {
            try {
                ctx.chat.type === 'private' ?
                    await ctx.replyWithHTML
                    (`üëª <b>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫</b> ${date} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫—É—Ä—Å –¥–ª—è <b>${currency.currency}</b>:\n\n üí∑ ${res}`) :
                    await ctx.replyWithHTML
                    (`üëª <b>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫</b> ${date} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫—É—Ä—Å –¥–ª—è <b>${currency.currency}</b>:\n\n üí∑ ${res}`,
                        Extra.inReplyTo(ctx.message.message_id));
            }
            catch(e){
                __lock.acquire('error', () =>{
                    return Logs.logError(new Exception(7, e.message));
                })
                    .catch(err => {
                        console.log(err.message);
                    })
            }
        })
        .catch(e => {
            if(e.id === 5){
                next();
            }
            else if(ctx.chat.type === 'private'){
                ctx.reply(e.message)
                    .catch(e => {
                        __lock.acquire('error', () =>{
                            return Logs.logError(new Exception(7, e.message));
                        })
                            .catch(err => {
                                console.log(err.message);
                            })
                    })
            }
        })
})

bot.on('text', ctx => {
    let message = ctx.message.text;
    let city = null;
    let currency = null;
    Descriptor.decodeMessage(message)
        .then(res => {
            city = res.city.city;
            currency = res.currency.currency;
            return Parser.getBanks(res.postFields)
        })
        .then(async res => {
            let replyHeader = `üëª <b>–ë–∞–Ω–∫–∏ —Å –≤—ã–≥–æ–¥–Ω—ã–º –∫—É—Ä—Å–æ–º ${currency} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}:</b>\n\n`;
            let replyBody = '';
            for(let i = 0; i < 5 && i < res.length; i++){
                replyBody += 'üèõ <b>' + res[i].bank + '</b>\n' + 'üíµ –ü–æ–∫—É–ø–∫–∞: ' +
                    res[i].buy + ', \nüí∂ –ü—Ä–æ–¥–∞–∂–∞: ' + res[i].sell + '\n\n'
            }
            try{
                replyBody ?
                    ctx.chat.type !== 'private' ?
                        await ctx.replyWithHTML(replyHeader + replyBody, Extra.inReplyTo(ctx.message.message_id)) :
                        await ctx.replyWithHTML(replyHeader + replyBody) :
                    ctx.chat.type !== 'private' ?
                        await ctx.replyWithHTML(`‚òπÔ∏è –í –≥–æ—Ä–æ–¥–µ ${city} <b>–Ω–µ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç ${currency}</b>`,
                            Extra.inReplyTo(ctx.message.message_id)) :
                        await ctx.replyWithHTML(`‚òπÔ∏è –í –≥–æ—Ä–æ–¥–µ ${city} <b>–Ω–µ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç ${currency}</b>`);
            }
            catch (e) {
                __lock.acquire('error', () =>{
                    return Logs.logError(new Exception(7, e.message));
                })
                    .catch(err => {
                        console.log(err.message);
                    })
            }

        })
        .catch(err => {
            if(ctx.chat.type === 'private'){
                ctx.reply(err.message)
                    .catch(e => {
                        __lock.acquire('error', () =>{
                            return Logs.logError(new Exception(7, e.message));
                        })
                            .catch(err => {
                                console.log(err.message);
                            })
                    })
            }
        })
});

bot.on('message', ctx => {
    if(ctx.chat.type === 'private'){
        ctx.replyWithHTML('üîÆ <b>–ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å</b>, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ...')
            .then(res => {
                setTimeout(() => {
                    return ctx.replyWithHTML('–ù–µ –≤—ã—Ö–æ–¥–∏—Ç.. <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç</b>');
                }, 3000)
            })
            .catch(e => {
                __lock.acquire('error', () =>{
                    return Logs.logError(new Exception(7, e.message));
                })
                    .catch(err => {
                        console.log(err.message);
                    })
            })
    }
})

bot.launch()
    .catch(e => {
        __lock.acquire('error', () =>{
            return Logs.logError(new Exception(8, e.message));
        })
            .catch(err => {
                console.log(err.message);
            })
})